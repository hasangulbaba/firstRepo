<!DOCTYPE html>
<html><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width">
    <title>Student Database </title>
	<script src="Database.js"></script>
</head>
  <style>
    .link {
        color: blue;
        cursor: pointer;
        font-style: italic;
    }
    .course {
        visibility: hidden;
        font: 10px arial, sans-serif;
        color: white;
        background: blue;
        cursor: text;
        padding: 6px;
        position: absolute;
        height: 90px;
        overflow-y: auto;
    }
    .link:hover .course { 
        visibility: visible; 
    }
  </style>

<script>
"use strict";
function report(msg, id, list) {
    out.innerHTML += "<br>"; msg += " ";
    out.appendChild(document.createTextNode(msg));
    let n1;
    if (id) {
        n1 = document.createElement("span");
        n1.appendChild(document.createTextNode(id));
        n1.classList.add("link");
        out.appendChild(n1); msg += id;
        //n1.addEventListener("click", doClick);
    }
    if (list) {
        let n2 = document.createElement("span");
        n2.appendChild(document.createTextNode(""));
        n2.innerHTML += list.join("<br>");
        n2.classList.add("course");
        if (n1) n1.appendChild(n2);
    }
    console.log(msg);
}
const url = "https://maeyler.github.io/JS/data/";
function readData(file) {
    console.log("readData "+file);
    if(file.includes("Students.txt")) {
      fetch(url+file)
          .then(r => r.text(), report)
          .then(addStudents, report);
    } 
	else if(file.includes("Courses.txt")) {
      fetch(url+file)
          .then(r => r.text(), report)
          .then(addCourses, report);
    }
	else {
		console.log("File could not find.")
	}
}
function parseStudent(line) {
    let b = line.split("\t");
    let id = b[0], name = b[1], gpa = b[2];
    let list = [];
    for (let i = 3; i < b.length; i++) 
        list.push(b[i]);
	//bayrak
    return new Student(b[0], b[1], b[2], list);
}
function parseCourse(line) {
	let b = line.split("\t");
	let name = b[0], time = b[1], date = b[2];
    let rooms = [];
    for (let i = 3; i < b.length; i++) 
		rooms.push(b[i]);
	//bayrak
    return new Course(b[0], b[1], b[2], rooms);
}
function addStudents(txt) {
    let msg = txt.length+" chars, ";
    let a = txt.split("\n");
    msg += a.length+" lines, ";
    for (let s of a) {
		let std = parseStudent(s);
		database.students.set(std.id, [std.name, std.gpa, std.courses]);
		//console.log(database.students.get(std.id));
		//keys.push(std.id); vals.push(std);
    }
    report(msg + database.students.size  + " students");
}
function addCourses(txt) {
    let msg = txt.length+" chars, ";
    let a = txt.split("\n");
    msg += a.length+" lines, ";
    for (let s of a) {
		let course = parseCourse(s);
		database.courses.set(course.name, [course.time, course.date, course.rooms]);
		//console.log(database.courses.get(course.name));
		//keys.push(std.id); vals.push(std);
    }
    report(msg + database.courses.size  + " students");
}
function doClick(evt) {
    //console.log(evt);
    let t = evt.target;
    //document.elementFromPoint(evt.clientX, evt.clientY);
    let s = t.innerText;
    if (/^\d+$/.test(s)) showStd(s); //s contains digits
    else if (t = t.firstElementChild) {
        t.style.visibility = "";
        let hide = function () {
            t.style.visibility = "hidden";
        };
        setTimeout(hide, 5000);
    }
}
function findID(id) {
	let i = database.students.get(id)
    //let i = keys.indexOf(id);
    if (i < 0) return null;
    return database.students.get(id);
}
function showStd(id) {
    let t = id + " ";
    let std = findID(id);
    if (!std) {
        report(t + "not found"); return;
    }
    t += std[0] + " " + std[1];
    report(t, std[2].length+" courses", std[2]);
}
//working
function studentsIn(code) {
    code = code.toUpperCase();
    let a = [];
    for (let std of database.students.keys()) 
        if (database.students.get(std)[2].includes(code)) 
            a.push(std + " " + database.students.get(std)[0]);
    if (a.length > 0)
        report(code + ": ", a.length + " students", a);
    else report("No students in " + code);
}
//working
function randomStd() {
    let i = Array.from(database.students.keys());
	let id = i[Math.trunc(Math.random() * i.length)]
	report("Random: " + database.students.get(id)[0] + " " + id);
}
//working
function findBest() {
    let b = 0;
	//let i;
    for (let a of database.students.values()) {
		if (a[1] > b) b = a[1];
	}
    report("Best: " + b);
}
//working
//Verilen GPA'nn Üzerinde not olan ögrenci sayisini bulab fonksiyon
function findNumberOfAboveGPA() {
	let gpaValue = gpa.value;
	let count = 0;
	for (let a of database.students.values()) {
		if (a[1] > gpaValue) count++;
	}
	report("Ortalamasi " + gpaValue + "'dan yuksek olan ögrenci sayisi: " + count);
}
//working
//Ögrencinin aldigi kurslar
function findNameOfCourses() {
	let studentIdNumber = studentId.value;
	report(studentIdNumber + " numarali ögrencinin aldigi kurslar: " + database.students.get(studentIdNumber)[2])
}
//working
//Ögrencinin sinav takvimi
function studentExamSchedule() {
	let studentIdNumber = studentId.value;
	let studentCourses = database.students.get(studentIdNumber)[2];
	let examSchedule = "";
	for (let course of studentCourses) {
		if (database.courses.get(course) != null) {
			examSchedule += database.courses.get(course)[1] + "  " + database.courses.get(course)[0] + " " + database.courses.get(course)[2] + "---";
		}
	}
	report(examSchedule);
	out.innerHTML = out.innerHTML.split("---").join("<br>");
}
//working
//ögrenci listesi
function studentList() {
	let studentList = "";
	let courseCodeName = courseCode.value;
	for (let id of database.students.keys()) {
		if (database.students.get(id)[2].includes(courseCodeName)) {
			studentList += database.students.get(id)[0] + " " + id + "---";
		}
	}
	report(studentList);
	out.innerHTML = out.innerHTML.split("---").join("<br>");
}
//working
//Sinavin Oldugu Yerdeki Kurs Listesi
function courseListGivenExamRoom() {
	let examRoom = courseCode.value;
	let courseList = "";
	for (let code of database.courses.keys()) {
		if (database.courses.get(code)[2].includes(examRoom)) {
			courseList += code + "---";
		}
	}
	report(courseList);
	out.innerHTML = out.innerHTML.split("---").join("<br>");
}
//working
//Istenen Sinita Verilen Toplam Kurs Sayisi
function numberOfCoursesGivenRoom() {
	let examRoom = courseCode.value;
	let courseCounter = 0;
	for (let code of database.courses.keys()) {
		if (database.courses.get(code)[2].includes(examRoom)) {
			courseCounter++;
		}
	}
	report("Total number of course in " + examRoom + " room: " + courseCounter);
}
//worst GPA
function worstGPA() {
    let b = 4;
	//let i;
    for (let a of database.students.values()) {
		if (a[1] < b) b = a[1];
	}
    report("Worst: " + b);
}
var database = new Database();
readData("Students.txt");
readData("Courses.txt");
</script>

<body>

<h2 id="title">Student Database</h2>
<table style="width:60%;">
  <tr>
   <th><button onclick="randomStd()">Random Student</button></th>
   <th><button onclick="findBest()">Best GPA</button></th> 
   <th><button onclick="findNumberOfAboveGPA()">GPA'nin Üzerindeki Ögrenci Sayisi</button></th> 
  </tr>
  <tr>
   <th><button onclick="findNameOfCourses()">Ögrencinin Aldigi Kurslar</button></th>
   <th><button onclick="studentExamSchedule()">Ögrencinin Sinav Takvimi</button></th>
   <th><button onclick="studentList()">Ögrenci Listesi</button></th> 
  </tr>
  <tr>
   <th><button onclick="courseListGivenExamRoom()">Sinavin Oldugu Yerdeki Kurs Listesi</button>&emsp;&emsp;</th>
   <th><button onclick="numberOfCoursesGivenRoom()">Istenen Sinita Verilen Toplam Kurs Sayisi</button>&emsp;&emsp;</th>
   <th><button onclick="worstGPA()">Worst GPA</button>&emsp;&emsp;</th>
  </tr>
  <tr>
   <th><button onclick='out.innerText=""'>Clear</button></th>
   <th></th> 
   <th></th> 
  </tr>
</table>

<table>
  <tr style="text-align:left;">
   <th><text style="text-align:left;">Student Id: </text></th>
   <th><input id="studentId" type="number" onchange="showStd(value)"></th>
  </tr>
  <tr style="text-align:left;">
   <th><text style="text-align:left;">Course Code: </text></th>
   <th><input id="courseCode" type="text" onchange="studentsIn(value)" value="math 206 "></th>
  </tr>
  <tr style="text-align:left;">
   <th><text style="text-align:left;">GPA: </text></th>
   <th><input id="gpa" type="text" value="3.00"></th>
  </tr>
</table>

<p id="out" onclick="doClick(event)">Result:</p>


</body></html>
